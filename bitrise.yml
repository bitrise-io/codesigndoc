format_version: 1.1.0
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

app:
  envs:
  - BITRISE_BIN_NAME: codesigndoc
  - GITHUB_RELEASES_URL: https://github.com/bitrise-tools/${BITRISE_BIN_NAME}/releases

workflows:

  _install_test_tools:
    steps:
    - script:
        title: Install required testing tools
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            # Check for unhandled errors
            go get -u github.com/kisielk/errcheck
            # Go lint
            go get -u github.com/golang/lint/golint

  _test:
    steps:
    - script:
        title: GOLIST_WITHOUT_VENDOR
        inputs:
        - content: |-
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Go Test
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go test $GOLIST_WITHOUT_VENDOR
    - script:
        title: Err check
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go Lint
        inputs:
        - content: |-
            #!/bin/bash
            set -e

            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"

  install:
    before_run:
    - _test
    steps:
    - script:
        title: Test & install
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go install

  dep-update:
    title: Dep update
    description: |
      Used for updating bitrise dependencies with dep
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  ci:
    before_run:
    - _install_test_tools
    - _test
    steps:
    - slack:
        run_if: .IsCI
        inputs:
        - webhook_url: $INTERNAL_DEV_SLACK_WEBHOOK_URL
        - channel: $INTERNAL_DEV_SLACK_CHANNEL
        - from_username: ${BITRISE_BIN_NAME} - CI - OK
        - from_username_on_error: ${BITRISE_BIN_NAME} - CI - ERROR
        - emoji: ":white_check_mark:"
        - emoji_on_error: ":no_entry_sign:"
        - message: |-
            CI was successful on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}
        - message_on_error: |-
            CI FAILED on branch: *${BITRISE_GIT_BRANCH}*

            Build URL: ${BITRISE_BUILD_URL}

  create-release:
    before_run:
    - _test
    steps:
    - script:
        title: Creating deploy
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            if [ -f _bin/tmpbin ] ; then
              rm _bin/tmpbin
            fi
            go build -o _bin/tmpbin
            binversion="$(_bin/tmpbin version)"
            echo "binversion: ${binversion}"
            mkdir -p _bin/${binversion}
            finalpth=_bin/${binversion}/${BITRISE_BIN_NAME}-$(uname -s)-$(uname -m)
            echo "finalpth: ${finalpth}"
            mv _bin/tmpbin "${finalpth}"
            # register the version for next steps
            envman add --key RELEASE_VERSION --value "${binversion}"
            # generate changelog
            releaseman create-changelog --version "${binversion}"
    - script:
        title: Creating release install_wrap
        inputs:
        - content: |-
            template_path = "./_scripts/install_wrap.sh.template"
            puts " * template_path: #{template_path}"
            template_content = File.read(template_path)
            # -- xcode --
            target_path = "./_scripts/install_wrap-xcode.sh"
            puts " * target_path: #{target_path}"
            final_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            final_content = final_content.gsub("{{scan_cmd}}", 'xcode')
            File.open(target_path, "w") do |f|
              f.write(final_content)
            end
            # for compatibility
            File.open("./_scripts/install_wrap.sh", "w") do |f|
              f.write(final_content)
            end
            # -- xamarin --
            target_path = "./_scripts/install_wrap-xamarin.sh"
            puts " * target_path: #{target_path}"
            final_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
            final_content = final_content.gsub("{{scan_cmd}}", 'xamarin')
            File.open(target_path, "w") do |f|
              f.write(final_content)
            end
        - runner_bin: ruby
    # - script:
    #     title: Creating release changelog template
    #     inputs:
    #     - content: |-
    #         changelog_path = "./_changelogs/#{ENV['RELEASE_VERSION']}.md"
    #         puts " * changelog_path: #{changelog_path}"
    #         template_content = File.read("./_changelogs/template.md")
    #         changelog_content = template_content.gsub("{{version}}", ENV['RELEASE_VERSION'])
    #         File.open(changelog_path, "w") do |f|
    #           f.write(changelog_content)
    #         end
    #     - runner_bin: ruby
    # - script:
    #     title: Open _bin folder
    #     inputs:
    #     - content: open _bin
