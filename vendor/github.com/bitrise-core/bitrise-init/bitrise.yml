format_version: "5"
default_step_lib_source: https://github.com/bitrise-io/bitrise-steplib.git

workflows:
  # ----------------------------------------------------------------
  # --- workflows for CI and testing
  ci-docker:
    steps:
    - script:
        inputs:
        - content: |-
            #!/bin/env bash
            set -ex
            docker-compose build
            docker-compose run --rm app bitrise run ci

  ci:
    after_run:
    - go-test
    - integration-test

  go-test:
    steps:
    - script:
        title: Export go files to test
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex
            no_vendor_paths="$(go list ./... | grep -v vendor)"
            envman add --key GOLIST_WITHOUT_VENDOR --value "$no_vendor_paths"
    - script:
        title: Err check
        inputs:
        - content: |
            #!/usr/bin/env bash
            set -ex
            go get -u github.com/kisielk/errcheck
            errcheck -asserts=true -blank=true $GOLIST_WITHOUT_VENDOR
    - script:
        title: Go lint
        inputs:
        - content: |-
            #!/usr/bin/env bash
            set -ex
            go get -u github.com/golang/lint/golint
            while read -r line; do
              echo "-> Linting: $line"
              golint_out="$(golint $line)"
              if [[ "${golint_out}" != "" ]] ; then
                echo "=> Golint issues found:"
                echo "${golint_out}"
                exit 1
              fi
            done <<< "$GOLIST_WITHOUT_VENDOR"
    - script:
        title: Go test
        inputs:
        - content: go test ./...

  integration-test:
    steps:
    - script:
        title: Go build
        inputs:
        - content: |-
            #!/bin/bash
            set -ex

            # build the new bitrise
            current_dir=$(pwd)
            current_bitrise_init=$current_dir/_tmp/ci-bin
            go build -o $current_bitrise_init

            envman add --key CURRENT_BITRISE_INIT --value $current_bitrise_init
    - script:
        title: Run integration tests
        inputs:
        - content: |-
            #!/bin/bash
            echo "Running integration tests ..."
            set -ex

            export INTEGRATION_TEST_BINARY_PATH="$CURRENT_BITRISE_INIT"
            go test -v ./_tests/integration/...

  # ----------------------------------------------------------------
  # --- workflows for Utility
  dep-update:
    title: Do dependency update
    steps:
    - script:
        title: Dependency update
        inputs:
        - content: |-
            #!/bin/bash
            set -ex
            go get -u -v github.com/golang/dep/cmd/dep
            dep ensure -v
            dep ensure -v -update

  create-binaries:
    title: Create binaries
    description: |
        Creates Linux and Darwin binaries
    steps:
    - script:
        title: Create binaries
        inputs:
        - content: |
            #!/bin/bash
            set -e
            set -x

            BIN_NAME="bitrise-init"

            echo
            echo "Create final binaries"
            echo "  Build number: $BITRISE_BUILD_NUMBER"

            export ARCH=x86_64
            export GOARCH=amd64

            # Create Darwin bin
            export OS=Darwin
            export GOOS=darwin

            DEPLOY_PATH="_bin/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Darwin binary at: $DEPLOY_PATH"

            version_package="github.com/bitrise-core/bitrise-init/version"

            go build \
              -ldflags "-X $version_package.BuildNumber=$BITRISE_BUILD_NUMBER -X $version_package.Commit=$GIT_CLONE_COMMIT_HASH" \
              -o "$DEPLOY_PATH"

            envman add --key OSX_DEPLOY_PATH --value $DEPLOY_PATH
            cp $DEPLOY_PATH $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH
            echo "  Copy final Darwin binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH"


            # Create Linux binary
            export OS=Linux
            export GOOS=linux

            DEPLOY_PATH="_bin/$BIN_NAME-$OS-$ARCH"
            echo "  Create final Linux binary at: $DEPLOY_PATH"

            go build \
              -ldflags "-X $version_package.BuildNumber=$BITRISE_BUILD_NUMBER -X $version_package.Commit=$GIT_CLONE_COMMIT_HASH" \
              -o "$DEPLOY_PATH"

            envman add --key LINUX_DEPLOY_PATH --value $DEPLOY_PATH
            cp $DEPLOY_PATH $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH
            echo "  Copy final Linux binary to: $BITRISE_DEPLOY_DIR/$BIN_NAME-$OS-$ARCH"